{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyP9nrgWPyImZOAbugcMsXHm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["## Transfer Learning with TensorFlow Part 1: Feature Extraction\n","\n","Transfer learning is leveraging a working model's existing architecture and learned patterns for our own problem.\n","\n","There are two main benefits:\n","\n","1. Can leverage an existing neural network architecture proven to work on problems similar to our own.\n","2. Can leverage a working neural network architecture which has already learned patterns on similar data to our own, then we can adapt those patterns to our own data."],"metadata":{"id":"uaVpwNwo-2q5"}},{"cell_type":"code","source":["!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lAzNPQOT_Ryt","executionInfo":{"status":"ok","timestamp":1649804484201,"user_tz":240,"elapsed":148,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"f103ef58-a17d-4820-ac94-5af17cbec8de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Tue Apr 12 23:01:23 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla K80           Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   62C    P8    31W / 149W |      0MiB / 11441MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}]},{"cell_type":"markdown","source":["## Downloading and Becoming One With the Data"],"metadata":{"id":"mSsEGf82AkZh"}},{"cell_type":"code","source":["# Get data (10% of 10 food classes from Food101)\n","\n","import zipfile\n","\n","# Download the data\n","!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","\n","# Unzip\n","zip_ref = zipfile.ZipFile(\"10_food_classes_10_percent.zip\")\n","zip_ref.extractall()\n","zip_ref.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZKtyfvx_AxOe","executionInfo":{"status":"ok","timestamp":1650402700053,"user_tz":240,"elapsed":3796,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"14086bb2-b7a8-457e-bdf0-0c4b3c5ae127"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-04-19 21:11:36--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","Resolving storage.googleapis.com (storage.googleapis.com)... 172.217.204.128, 172.217.203.128, 108.177.13.128, ...\n","Connecting to storage.googleapis.com (storage.googleapis.com)|172.217.204.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 168546183 (161M) [application/zip]\n","Saving to: ‘10_food_classes_10_percent.zip’\n","\n","10_food_classes_10_ 100%[===================>] 160.74M   171MB/s    in 0.9s    \n","\n","2022-04-19 21:11:37 (171 MB/s) - ‘10_food_classes_10_percent.zip’ saved [168546183/168546183]\n","\n"]}]},{"cell_type":"code","source":["# How many images in each folder?\n","import os\n","\n","for dirpath, dirnames, filenames in os.walk(\"10_food_classes_10_percent\"):\n","  print(f\"There are {len(dirnames)} directories and {len(filenames)} images in '{dirpath}'.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6-0n4Yi1Bfio","executionInfo":{"status":"ok","timestamp":1650402701931,"user_tz":240,"elapsed":162,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"9a52b40f-34dc-4ece-f70e-74329841f87e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 2 directories and 0 images in '10_food_classes_10_percent'.\n","There are 10 directories and 0 images in '10_food_classes_10_percent/test'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/pizza'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/fried_rice'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/ramen'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/chicken_curry'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/sushi'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/hamburger'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/grilled_salmon'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/steak'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/chicken_wings'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/ice_cream'.\n","There are 10 directories and 0 images in '10_food_classes_10_percent/train'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/pizza'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/fried_rice'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/ramen'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/chicken_curry'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/sushi'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/hamburger'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/grilled_salmon'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/steak'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/chicken_wings'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/ice_cream'.\n"]}]},{"cell_type":"markdown","source":["## Creating Data Loaders (Preparing the Data)\n","\n","We'll use the `ImageDataGenerator` class to load in our images in batches."],"metadata":{"id":"xhk4zjy2B_iA"}},{"cell_type":"code","source":["# Setup data inputs\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","IMG_SHAPE = (224,224)\n","BATCH_SIZE = 32\n","\n","train_dir = \"10_food_classes_10_percent/train/\"\n","test_dir = \"10_food_classes_10_percent/test/\"\n","\n","train_datagen = ImageDataGenerator(rescale=1/255.)\n","test_datagen = ImageDataGenerator(rescale=1/255.)\n","print(\"Training images:\")\n","train_data_10_percent = train_datagen.flow_from_directory(train_dir,\n","                                                          target_size=IMG_SHAPE,\n","                                                          batch_size=BATCH_SIZE,\n","                                                          class_mode=\"categorical\")\n","print(\"Testing images:\")\n","test_data = test_datagen.flow_from_directory(test_dir,\n","                                             target_size=IMG_SHAPE,\n","                                             batch_size=BATCH_SIZE,\n","                                             class_mode=\"categorical\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yaZg794tCXVX","executionInfo":{"status":"ok","timestamp":1650402708917,"user_tz":240,"elapsed":4482,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"c57b0ca5-8f00-48a6-f5d5-acebbe20a9aa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Training images:\n","Found 750 images belonging to 10 classes.\n","Testing images:\n","Found 2500 images belonging to 10 classes.\n"]}]},{"cell_type":"markdown","source":["## Setting Up Callbacks (Things to run whilst our model trains)\n","\n","Callbacks are extra functionality you can add to your models to be performed during or after training. Some of the most popular callbacks:\n","\n","* Tracking experiments with the TensorBoard callback\n","* Model checkpoint with the ModelCheckpoint callback\n","* Stopping a model from training (before it trains too long and overfits) with the EarlyStopping callback"],"metadata":{"id":"zwZ8xT1nDnO6"}},{"cell_type":"code","source":["# Create TensorBoard callback (functionized because we need to create a new one for each model)\n","import datetime\n","\n","def create_tensorboard_callback(dir_name, experiment_name):\n","  log_dir = dir_name + \"/\" + experiment_name + \"/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n","  tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir)\n","  print(f\"Saving TensorBoard log files to {log_dir}\")\n","  return tensorboard_callback"],"metadata":{"id":"CtIgCsEuD916"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["> **Note**: You can customize the directory where your TensorBoard logs (model training metrics) get saved to whatever you like. The `log_dir` parameter we've created above is only one option."],"metadata":{"id":"Bdhjh8lVGNeh"}},{"cell_type":"markdown","source":["##Creating Models Using TensorFlow Hub\n","\n","In the past we've used TensorFlow to create our own models layer by layer from scratch.\n","\n","Now we're going to do a similar process, except the majority of our model's layers are going to come from TensorFlow Hub.\n","\n","We can access pretrained models on: [TF Hub](https://tfhub.dev/)\n","\n","Browsing the TensorFlow Hub page and sorting for image classification, we found the following feature vector model: [Feature Vector](https://tfhub.dev/tensorflow/efficientnet/b0/feature-vector/)"],"metadata":{"id":"vDd03-uwGaIM"}},{"cell_type":"code","source":["# Let's compare the following two models\n","resnet_url = \"https://tfhub.dev/google/imagenet/resnet_v2_50/feature_vector/4\"\n","\n","efficientnet_url = \"https://tfhub.dev/tensorflow/efficientnet/b0/feature-vector/1\""],"metadata":{"id":"zloFun7sGdBG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Import dependencies\n","import tensorflow as tf\n","import tensorflow_hub as hub\n","from tensorflow.keras import layers"],"metadata":{"id":"M91_k8FoIhHc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Let's make a create_model() function to create a model from a URL\n","def create_model(model_url,num_classes):\n","  \"\"\"\n","  Takes a TensorFlow Hub URL and creates a Keras Sequential model with it.\n","  Args:\n","    model_url (str): A TensorFlow Hub feature extraction URL\n","    num_classes (int): Number of output neurons in the output layer,\n","      should be equal to number of target classes.\n","\n","  Returns:\n","    An uncompiled Keras Sequential model with model_url as feature extractor\n","      layer and Dense output layer with num_classes output neurons.\n","  \"\"\"\n","  num_classes=10\n","  # Download the pretrained model and save it as a Keras layer\n","  feature_extractor_layer = hub.KerasLayer(model_url,\n","                                           trainable=False,\n","                                           name=\"feature_extractor_layer\",\n","                                           input_shape=IMG_SHAPE+(3,))\n","\n","  # Create our own model\n","  model = tf.keras.Sequential([\n","    feature_extractor_layer,\n","    layers.Dense(num_classes,activation=\"softmax\",name=\"output_layer\")\n","  ])\n","\n","  return model\n",""],"metadata":{"id":"uRqMS9J-IqtS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Creating (and testing) ResNet TensorFlow Hub Feature Extraction Model"],"metadata":{"id":"jl-LrQe9KJSs"}},{"cell_type":"code","source":["# Create Resnet model\n","resnet_model = create_model(resnet_url,\n","                            num_classes=train_data_10_percent.num_classes)"],"metadata":{"id":"8GV4wa0XKNnl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Compile our Resnet model\n","resnet_model.compile(loss=\"categorical_crossentropy\",\n","                     optimizer=tf.keras.optimizers.Adam(),\n","                     metrics=[\"accuracy\"])"],"metadata":{"id":"jQauBSAmKdRf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Fit our Resnet model\n","history = resnet_model.fit(train_data_10_percent,\n","                 epochs=5,\n","                 steps_per_epoch=len(train_data_10_percent),\n","                 validation_data=test_data,\n","                 validation_steps=len(test_data),\n","                 callbacks=[create_tensorboard_callback(dir_name=\"tensorflow_hub\",experiment_name=\"ResnetModel\")])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ml0EInOILBOu","executionInfo":{"status":"ok","timestamp":1650131189267,"user_tz":240,"elapsed":148063,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"18214282-a8fc-4719-9988-ccd1b54af6de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Saving TensorBoard log files to tensorflow_hub/ResnetModel/20220416-174401\n","Epoch 1/5\n","24/24 [==============================] - 41s 1s/step - loss: 1.9337 - accuracy: 0.3707 - val_loss: 1.1740 - val_accuracy: 0.6340\n","Epoch 2/5\n","24/24 [==============================] - 22s 927ms/step - loss: 0.9077 - accuracy: 0.7440 - val_loss: 0.8549 - val_accuracy: 0.7388\n","Epoch 3/5\n","24/24 [==============================] - 22s 929ms/step - loss: 0.6199 - accuracy: 0.8320 - val_loss: 0.7427 - val_accuracy: 0.7732\n","Epoch 4/5\n","24/24 [==============================] - 22s 925ms/step - loss: 0.4821 - accuracy: 0.8787 - val_loss: 0.7048 - val_accuracy: 0.7804\n","Epoch 5/5\n","24/24 [==============================] - 22s 922ms/step - loss: 0.3801 - accuracy: 0.9080 - val_loss: 0.6732 - val_accuracy: 0.7896\n"]}]},{"cell_type":"code","source":["# Let's create a function to plot our loss curves...\n","# Tidbit: You could put a function like this into a script called \"helper.py\" and import\n","import matplotlib.pyplot as plt\n","\n","# Plot the validation and training curves\n","def plot_loss_curves(history):\n","  \"\"\"\n","  Returns separate loss curves for training and validation metrics.\n","\n","  Args:\n","  history: TensorFlow History object\n","\n","  Returns:\n","  Plots of training/validation loss and accuracy metrics.\n","  \"\"\"\n","\n","  loss = history.history[\"loss\"]\n","  val_loss = history.history[\"val_loss\"]\n","  accuracy = history.history[\"accuracy\"]\n","  val_accuracy = history.history[\"val_accuracy\"]\n","  epochs = range(len(history.history[\"loss\"]))\n","\n","  # Plot loss\n","  plt.plot(epochs, loss, label=\"training_loss\")\n","  plt.plot(epochs,val_loss,label=\"val_loss\")\n","  plt.title(\"Loss\")\n","  plt.xlabel(\"Epochs\")\n","  plt.legend()\n","\n","  # Plot accuracy\n","  plt.figure()\n","  plt.plot(epochs,accuracy,label=\"training_accuracy\")\n","  plt.plot(epochs,val_accuracy,label=\"val_accuracy\")\n","  plt.title(\"Accuracy\")\n","  plt.xlabel(\"Epochs\")\n","  plt.legend()\n",""],"metadata":{"id":"Al7XaWCsbzVz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_loss_curves(history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":572},"id":"cLYZFkb5cGGw","executionInfo":{"status":"ok","timestamp":1650131422767,"user_tz":240,"elapsed":688,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"8ad580bc-d1ae-47c5-b86b-97b520cf588e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## Creating (and testing) EfficientNet TensorFlow Hub Feature Extraction Model"],"metadata":{"id":"eQPX0V6ZgK7G"}},{"cell_type":"code","source":["# Create EfficientNet model\n","efficientnet_model = create_model(efficientnet_url,\n","                            num_classes=train_data_10_percent.num_classes)\n","\n","efficientnet_model.compile(loss=\"categorical_crossentropy\",\n","                     optimizer=tf.keras.optimizers.Adam(),\n","                     metrics=[\"accuracy\"])\n","\n","# Fit our EfficientNet model\n","efficientnet_history = efficientnet_model.fit(train_data_10_percent,\n","                 epochs=5,\n","                 steps_per_epoch=len(train_data_10_percent),\n","                 validation_data=test_data,\n","                 validation_steps=len(test_data),\n","                 callbacks=[create_tensorboard_callback(dir_name=\"tensorflow_hub\",experiment_name=\"EfficientnetModel\")])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2gPsRZeXgSpU","executionInfo":{"status":"ok","timestamp":1650131811643,"user_tz":240,"elapsed":131883,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"b1b58437-27f7-4b2f-bd15-ba569c997959"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Saving TensorBoard log files to tensorflow_hub/EfficientnetModel/20220416-175456\n","Epoch 1/5\n","24/24 [==============================] - 35s 964ms/step - loss: 1.9135 - accuracy: 0.3960 - val_loss: 1.3394 - val_accuracy: 0.7220\n","Epoch 2/5\n","24/24 [==============================] - 20s 863ms/step - loss: 1.0929 - accuracy: 0.7413 - val_loss: 0.8766 - val_accuracy: 0.8296\n","Epoch 3/5\n","24/24 [==============================] - 19s 829ms/step - loss: 0.7732 - accuracy: 0.8360 - val_loss: 0.7007 - val_accuracy: 0.8464\n","Epoch 4/5\n","24/24 [==============================] - 19s 832ms/step - loss: 0.6159 - accuracy: 0.8653 - val_loss: 0.6121 - val_accuracy: 0.8540\n","Epoch 5/5\n","24/24 [==============================] - 19s 831ms/step - loss: 0.5209 - accuracy: 0.8907 - val_loss: 0.5636 - val_accuracy: 0.8576\n"]}]},{"cell_type":"code","source":["plot_loss_curves(efficientnet_history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":572},"id":"Vk-lx6g4hrjY","executionInfo":{"status":"ok","timestamp":1650131918471,"user_tz":240,"elapsed":573,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"c92be07e-c278-4190-961f-03e0e75c72ed"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["resnet_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cQ9-Cmpikj_M","executionInfo":{"status":"ok","timestamp":1650132669802,"user_tz":240,"elapsed":274,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"c94a4383-0ec2-4839-b0ce-637dc80f9655"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," feature_extractor_layer (Ke  (None, 2048)             23564800  \n"," rasLayer)                                                       \n","                                                                 \n"," output_layer (Dense)        (None, 10)                20490     \n","                                                                 \n","=================================================================\n","Total params: 23,585,290\n","Trainable params: 20,490\n","Non-trainable params: 23,564,800\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["efficientnet_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tbC1nT4_klMC","executionInfo":{"status":"ok","timestamp":1650132677128,"user_tz":240,"elapsed":7,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"66d6276e-f455-4d9b-b4f4-f3eee26c8a84"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," feature_extractor_layer (Ke  (None, 1280)             4049564   \n"," rasLayer)                                                       \n","                                                                 \n"," output_layer (Dense)        (None, 10)                12810     \n","                                                                 \n","=================================================================\n","Total params: 4,062,374\n","Trainable params: 12,810\n","Non-trainable params: 4,049,564\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["## Different Types of Transfer Learning\n","* **\"As is\" transfer learning** - using an existing model with no changes whatsoever (e.g. using ImageNet model on 1000 ImageNet classes, none of your own)\n","* **\"Feature Extraction\" transfer learning** - use the prelearned patterns of an existing model (e.g. EfficientNetB0 trained on ImageNet) and adjust the output layer for your own problem (e.g. 1000 classes -> 10 classes of food)\n","* **\"Fine-tuning\" transfer learning** - use the prelearned patterns of an existing model and \"fine-tune\" many or all of the underlying layers (including new output layers)"],"metadata":{"id":"zxHzlDyckpN4"}},{"cell_type":"markdown","source":["## Comparing Our Model's Results Using TensorBoard\n","\n","**Note**: When you upload things to TensorBoard.dev, your experiments are public. So if you're running private experiments (things you don't want others to see) do not upload them to TensorBoard.dev."],"metadata":{"id":"g4rYGGnglMh9"}},{"cell_type":"code","source":["# Upload TensorBoard dev records\n","!tensorboard dev upload --logdir ./tensorflow_hub/ \\\n","  --name \"EfficientNetB0 vs. ResNet50V2\" \\\n","  --description \"Comparing two different TF Hub feature extraction model architectures\" \\\n","  --one_shot"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"21pC-ddlnPUJ","executionInfo":{"status":"ok","timestamp":1650133591945,"user_tz":240,"elapsed":77921,"user":{"displayName":"Tim Beers","userId":"16463524725102368021"}},"outputId":"9665454c-86ae-42cc-e8fd-6318d9ce7712"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","***** TensorBoard Uploader *****\n","\n","This will upload your TensorBoard logs to https://tensorboard.dev/ from\n","the following directory:\n","\n","./tensorflow_hub/\n","\n","This TensorBoard will be visible to everyone. Do not upload sensitive\n","data.\n","\n","Your use of this service is subject to Google's Terms of Service\n","<https://policies.google.com/terms> and Privacy Policy\n","<https://policies.google.com/privacy>, and TensorBoard.dev's Terms of Service\n","<https://tensorboard.dev/policy/terms/>.\n","\n","This notice will not be shown again while you are logged into the uploader.\n","To log out, run `tensorboard dev auth revoke`.\n","\n","Continue? (yes/NO) yes\n","\n","Please visit this URL to authorize this application: https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=373649185512-8v619h5kft38l4456nm2dj4ubeqsrvh6.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&state=NilRNMuBOvuNeeXiWE863VocdnNCvA&prompt=consent&access_type=offline\n","Enter the authorization code: 4/1AX4XfWhTcwifYb0wGHdnUn7bB5TJx1RdbSpqdB4AXHTTnAfyxVX-gvXRetw\n","\n","\n","New experiment created. View your TensorBoard at: https://tensorboard.dev/experiment/Os6vU1T2QKyHayNuaQzgWw/\n","\n","\u001b[1m[2022-04-16T18:26:28]\u001b[0m Started scanning logdir.\n","\u001b[1m[2022-04-16T18:26:30]\u001b[0m Total uploaded: 60 scalars, 0 tensors, 2 binary objects (5.6 MB)\n","\u001b[1m[2022-04-16T18:26:30]\u001b[0m Done scanning logdir.\n","\n","\n","Done. View your TensorBoard at https://tensorboard.dev/experiment/Os6vU1T2QKyHayNuaQzgWw/\n"]}]}]}